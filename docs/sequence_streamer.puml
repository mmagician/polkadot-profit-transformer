@startuml

box "Streamer" #LightBlue
participant "Runner" as run
participant "Blocks.Sync" as sync
participant "Extrinsics" as ex
participant "Blocks.processBlock" as sblock
participant "Staking" as s
end box

participant "Nodes" as nodes
participant "Polkadot(JS-API)" as js
participant "Enrichments processor" as en
participant "Kafka" as k
participant "K-SQL db" as ksql
participant "postgresql" as post
participant "Redash" as red

actor "User" as user

run -> sync: Service start
loop To the las block
    sync -> sblock: Service start
end

sblock -> js: Request block info \nrpc.chain.getBlockHash(block_id)
js --> nodes: Request data from blockchain nodes
nodes --> js: Response from blockchain nodes
js --> sblock: Block hash
sblock -> js: Block hash data
js --> nodes: Request data from blockchain nodes
nodes --> js: Response from blockchain nodes
js --> sblock: Block data
sblock -> sblock: Split streams: events and extrinsics

alt Block info and events
    sblock -> k: Forward data
else Extrinsics
    sblock -> ex: Extrinsics
    ex -> ex: Data parsing
    ex -> k: Forward data
end

sblock -> sblock: Check event=EraPayout

alt Consist
    sblock -> s: era id with EraPayput
    s -> s: Collecting staking data
    
    alt Era info 
        s -> ex: Extrinsics
        ex -> ex: Data parsing
        ex -> k: Forward data
    else Validators and nominators 
        s -> ex: Extrinsics
        ex -> ex: Data parsing
        ex -> k: Forward data
    end
end

en -> k: Stream "identity" subscription
k --> en: Forward data

alt Event: create, killed, judgement given
    en --> k: Identity info refresh
else Else update
    en -> js: Request:\n polkadotConnector.query.identity.identityOf(accountId)
    js --> en: Response: actual account info
    en -> k: Forward response
end

ksql -> k: Streams subscription
k --> ksql: Forward data
ksql -> ksql: Converts streams data
ksql -> post: Inserting data


red -> post: Connect
post -> red: Providing access
red -> user: Visualization


@enduml
